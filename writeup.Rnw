\documentclass{article}

\usepackage[margin = 1in]{geometry}

\author{Sam Helmich}
\title{Integrating Quarterly Reporting Data with Other Sources}
\begin{document}
<<initalize, echo = FALSE>>=
library(xtable)
source("gatherer/useful functions.R")
read_chunk("gatherer/useful functions.R")
read_chunk("gatherer/ui.R")
read_chunk("gatherer/server.R")
@
\maketitle

\section{Quarterly Reporting Data}
Quarterly reporting data is stored in the SEC's EDGAR (\textbf{E}lectronic \textbf{D}ata \textbf{G}athering \textbf{A}nd \textbf{R}etrieval) files. Since late 2008 / early 2009, companies have been required to report financial information in a standardized format, specifically XBRL (E\textbf{X}tensible \textbf{B}usiness \textbf{R}eporting \textbf{L}anguage). This ensures that the data is all in the same format, however this format is not something that is easy or even nice to work with. 

\subsection{Finding a Company}
Before we can pull data on an individual company, we must first find that company's CIK (\textbf{C}entral \textbf{I}ndex \textbf{K}ey). The SEC provides a web interface for searching for a CIK for a particular company here: http://www.sec.gov/cgi-bin/browse-edgar. However, ideally this is a task that it would be nice to complete in R itself. For this, we'll build a \texttt{cik.lookup} function, that takes a text string input and will return the search results.

The function as it currently stands:
<<cik.lookup>>=
@

It works well for searching for things that have multiple hits:
<<cik.lookup.ex1, eval = FALSE>>=
cik.lookup("Microsoft")
@
\begin{center}
<<cik.lookup.ex1a, echo = FALSE, results='asis'>>=
xtable(cik.lookup("Microsoft"))
@
\end{center}

However, we start to run into hot water when we search for exactly the right thing.
<<cik.lookup.ex2>>=
cik.lookup("Fastenal")
@
Now obviously Fastenal is a realy company, and it does in fact have a CIK. The problem is that if you search for a company and it only returns 1 hit, then it will go to that company's filing page, which the \texttt{cik.lookup} funciton will treat the same as a search that didn't retun any results (which it should.) We want this function to ONLY get CIK's for companies, not go further. There is a different search tool (found at http://www.sec.gov/edgar/searchedgar/cik.htm), but this utilizes JavaScript to execute its search, rather than a straight forward search using a URL. This makes the function much more complicated, and as such this part isn't done yet. But since the CIK lookup works for some companies, we can use it to build the other things we need without severe reprocussions.

\subsection{Finding a Company's Reports}
Once you have a company's CIK, then accessing all of the records associated with that CIK is pretty straightforward if you're doing it from a browser, but until now no functionality that I know of has existed within R. For this, we can simply put together a URL that contains a CIK as well as a few other optional variables, and it will return 100 entries per page. For this, we'll need to keep going until we've retreived all of the records that we're after. The scope of this project will be concerned with grabbing 10-K filings (quarterly reports), but its worth noting that the \texttt{get.filing.locs} function has the capacity to search for \textit{any} form type, and can be used to find the archive location of any files. 

<<get.filing.locs>>=
@

As far as I know, this function is bug-free. Sometimes it takes a bit if there are more than 100 hits, as going through multiple pages is cumbersome at times. Here, an example of pulling the filing locations of 10-K forms from Microsoft is given but not evaluated, as the output doesn't fit well on a page. 

<<get.filing.locs.ex, eval = FALSE>>=
cik <- cik.lookup("Microsoft")$CIK[2]
get.filing.locs(cik, type = "10-K")
@

\texttt{get.filing.locs} returns a data table with 5 columns: 

\begin{center}
\begin{tabular}{ll}
Column Name & Description \\
Filings & This is the form type. For a 10-K form type, these will all be either 10-K or 10-K/A\\
Description & A Description full of Accounting-type jargon and filesize, nothing too useful\\
Filing Date & The date in which it was filed\\
File/Film Number & The specific number assigned to the file \\
links & A link to find the filing itself within the Archives 
\end{tabular}
\end{center}

We'll mostly be using the links from this section, as we'll need to use that to get to actual filings that we want to get the data from. 


\subsection{Scraping a Quarterly Report}
So once we've identified a link that we want, we can go to that link and pull the relevant filing data.
The example we'll be pulling will be the most recent  Note this URL can be found using the following code in R:

<<get.filing.locs.ex2>>=
cik <- cik.lookup("Microsoft")$CIK[2]
get.filing.locs(cik, type = "10-K")$links[1]
@

That link doesn't include the prefix "www.sec.gov", but it can easily be added in the functions that are built to use it. Once we have a location for the quarterly reports, we need to find the XBRL Instance Document, as this is the document that contais all of the financial info in the XBRL format. To get the XBRL instance document, we only need to scrape the page and find the link to the document (the description will be "XBRL INSTANCE DOCUMENT", yay for standardization).

The first thing we'll do is scrape the name of all files that are submitted for each filing, and then find the xbrl instance document.

<<get.files>>=
@

Once we've actually got the location of the xbrl instance file, we can then use functionality from the \texttt{'XBRL'} package to process the data into a bit more workable form. 

<<getXbrlData>>=
@

This form produces a list with 4 elemtents: a "facts" data frame where most of the information is, a "context" data frame, which allows for multiple variables of the same name to be delineated as meaning slightly different things, a "units" data frame where the units for all of the facts are stored (USD, EURO, shares, etc.), and a schema data frame which so far as I can tell simply lists the file name.

\subsection{Where To Go From Here}

From here, the xbrl data needs to be in a workable format. My ideas on how to do this is to take the three useful parts of the output of \texttt{getXbrlData} and merge them together (or maybe put the merge step earlier). Then I can take out the facts (the variable name for where the data I want it store), the elementId (what I'd like to use as a varaible name), and the start date and end date, and then the rest of the data could be treated as some sort of key (after taking out the data described) that can be used to identify each of the variable names. I then need a way that I can distribute values to ranges of dates (from start date to end date). I have some code for this portion written, but its not its own function yet. Here is the code as it currently rests in my workspace:

<<workspace, eval = FALSE>>=
source("gatherer/useful functions.R")

cik.lookup("Microsoft")
## Google's CIK is 0001288776


## I want to grab form 10-K
fls <- get.filing.locs(cik = 0000789019, type = "10-K")

# Maybe I want to get the data from the most recent 10-K filing
files <- get.files(fls$links[1])

# Grab the xbrl instance doc
xbrl.inst <- xbrl.inst.doc.loc(files)

# Grab the xbrl data
data <- getXbrlData(xbrl.inst)

create.megaframe <- function(xbrlData) Reduce(f = function(...) merge(..., all = T), x = xbrlData[-4])

niceify <- function(useful.frame){
  store <- vector("list", nrow(useful.frame))
  for(i in 1:length(store)){
    x <- useful.frame[i,]
    if(is.na(x$startDate)){
      store[[i]] <- data.frame(variable = x$variable, fact = x$fact, date = x$endDate)
    }else{
      store[[i]] <- data.frame(variable = x$variable, fact = x$fact, date = x$startDate + days(0:(x$endDate - x$startDate)))
    }
  }
  useful <- rbind.fill(store)
  dcast(useful, date ~ variable, value.var = "fact")
}

mf <- create.megaframe(data)
useful <- c("elementId", "fact", "decimals", "startDate", "endDate", "factId")
mf$startDate = ymd(mf$startDate)
mf$endDate = ymd(mf$endDate)
keyframe <- unique(mf[,which(!(names(mf) %in% useful))])
keyframe$context.key <- c(1:nrow(keyframe))
out.mf <- merge(keyframe, mf)
out.mf$variable <- paste0(out.mf$elementId,"-",out.mf$context.key)
useful.frame <- out.mf[,c("variable", "fact", "startDate", "endDate")]

ufn <- niceify(useful.frame)
@

The end form I want my data in will be the current output of \texttt{niceify}: A column for date, then a column for each variable. This will then be VERY easy to merge with other types of data, as we'll have an observation for each day, which is the standard format for mos or all of the data that comes out of the \texttt{quantmod} package, which I will be using as a major data source for stock and commodity prices.

\subsection{\texttt{'Gatherer'} Shiny App}
I wanted to get the guts working before developing a shiny app that would allow for putting this data together in an easy manner. I've started to write one with some things that I'd like to include, but most of that will be on hold until I finish the last few nuts and bolts bits. Below is the shiny code as it currently stands. 

<<ui, eval = FALSE>>=
@

<<server, eval = FALSE>>=
@




\end{document}